<<cache=FALSE, echo=FALSE,include=FALSE>>=
source('hooks.R', echo=TRUE)
fig.path='figures/text-ex-'
@

\setkeys{Gin}{width=0.5\textwidth}

<<echo=FALSE,eval=TRUE>>=
options(continue="  ")
@

\section{Graphical displays}

% http://flowingdata.com/2013/09/25/the-most-unisex-names-in-us-history/
Consider the following data graphic about birth control methods.
	\begin{center}
		\includegraphics[width=\textwidth]{gfx/birth-control.png}
	\end{center}
	\begin{enumerate}
		\item What quantity is being shown on the $y$-axis of each plot?
		\item List the variables displayed in the data graphic, along with their units and a few typical values for each. 
  	\item List the visual cues used in the data graphic and explain how each visual cue is linked to each variable.
		\item Examine the graphic carefully. Describe, in words, what \emph{information} you think the data graphic conveys. Do not just summarize the \emph{data} -- interpret the data in the context of the problem and tell me what it means. [Note: \emph{information} is meaningful to human beings -- it is not the same thing as \emph{data}.]
	\end{enumerate}

\section{Rectangular data}

The registrar maintains three rectangular arrays of data, labeled $students$, $courses$, and $enrollments$. [In \R terminology, they are \cmd{data.frame}s.] $students$ contains information about individual Smith students (e.g. their student ID, name, date of birth, class year, campus house, etc.). Each of the 2874 rows in $students$ contains data about one Smith student. $courses$ contains data about Smith courses (e.g. course ID, department, course number, instructor, room number, time, etc.). Each row in $courses$ contains data about one Smith course. The $enrollments$ table is a lookup table with only two columns: $student\_id$ and $course\_id$. Each row corresponds to a single student enrolled in a single course. Note that $enrollments$ may contain rows for Five College students who are not matriculated at Smith. The first few rows of the tables look like this:

<<echo=FALSE, results='asis', message=FALSE>>=
require(dplyr)
require(xtable)
students <- data.frame(student_id = 1:4, name = c("Alice", "Beth", "Carol", "Deirdre"), class = c(2016, 2016, 2018, 2017))
courses <- data.frame(course_id = 1:3, dept = c("SDS", "SDS", "ENG"), number = c(192, 220, 201), time_block = c("C", "D", "G"))
enrollments <- data.frame(student_id = c(1,1,2,2,3), course_id = c(1:3, 2:3))

@

\begin{table}[ht]
  \centering
  \begin{subtable}[b]{0.3\textwidth}
  
<<echo=FALSE, results='asis', message=FALSE>>=
students %>%
  xtable(caption = "students", digits = 0) %>%
  print(include.rownames = FALSE, floating=FALSE)
@
    \caption{students}
  \end{subtable}
  \hspace{1in}
  \begin{subtable}[b]{0.3\textwidth}
  
<<echo=FALSE, results='asis', message=FALSE>>=
enrollments %>%
  xtable(caption = "enrollments", digits = 0) %>%
  print(include.rownames = FALSE, floating=FALSE)
@
  
    \caption{enrollments}
  \end{subtable}
\end{table}

\begin{table}[ht]
  \centering
<<echo=FALSE, results='asis', message=FALSE>>=
courses %>%
  xtable(caption = "courses", digits = 0) %>%
  print(include.rownames = FALSE, floating=FALSE)
@
    \caption{courses}
\end{table}

For each of the following questions, describe \textbf{in words}, how you could use some of the five data verbs to compute the answer to the question posed. Be as specific as you can about what the operation will do and how it must be specified, but note that you do \textbf{not} have to write or reference \R code! You may write pseudocode if you prefer, but I still want a \textbf{written explanation} of what is happening!

	\begin{enumerate}

    \item How many students are in each class year?
    
    
    \item What is the total enrollment in each course? That is, create a list showing the number of students enrolled in each course. 


		
    \item Consider joining the two tables $students$ and $enrollments$, using $student\_id$ as the key. How would the result set differ if $students$ was \cmd{left\_join}ed onto $enrollments$, versus if $students$ was \cmd{right\_join}ed onto $enrollments$? Which would have more rows?
		

    \item The registrar would like to generate a schedule for each student. The schedule would list each student's classes and their time blocks. Describe how you could create this. 
		
	
	\end{enumerate}

\section{Model assessment}

You have just been hired as a data scientist for a tech startup. You and your new colleague, Kathy, have been given a data set $X$, consisting of $n$ observations of $p$ explanatory variables, and a binary response vector $y$ of length $n$. [You may assume that $n$ is several thousand and $p$ is several dozen.] Kathy reports that her classification model, $f$, achieves an error rate of 11\% on in-sample testing. That is, Kathy used $X$ and $y$ to build $f$, then computed $f(X) = \hat{y}$, compared $\hat{y}$ to $y$, and found that they agreed 89\% of the time. 
  \begin{enumerate}
    \item Explain to Kathy why 11\% is not necessarily an accurate estimate of her model's true error rate. 
    \item Carefully explain how a 3-fold cross-validation scheme could be used to estimate the true error rate of $f$. Be as specific as you can. 
  \end{enumerate}

\section{Simulating traffic}
  
You are working for the National Transportation Safety Board as a traffic engineer. One of your colleagues has written an \R function that will simulate virtual traffic through the toll booth at the Holyoke/Springfield exit on the Massachusetts Turnpike. Given initial conditions based on the day of week and the temperature, the simulator will randomly generate traffic, and record waiting times (in minutes) for individual cars at this toll booth. Thus, you might use the function like this:
  
  <<echo=FALSE>>=
  simulate.traffic = function(dayofweek = "Thursday", temp = 48) {
    rpois(25, 1)
  }
@
  <<>>=
simulate.traffic(dayofweek = "Thursday", temp = 48)
@

  \begin{enumerate}
  
    \item Describe how you could use this simulator to find a confidence interval for the mean waiting time for Mondays with a temperature of 56 degrees.
    \item Describe how you could use this simulator to find a confidence interval for the mean waiting time for an average day (i.e. a generic day, regardless of which day of the week or what the temperature was).
  
  \end{enumerate}
  
  

\section{Marriage records}
  
The data set \obj{Marriage} contains data about 98 marriage records from the Mobile, AL probate court. Binary variables are available about whether the marriage was presided over by a religious or secular official, the bride's age, and whether she had been previously married. Consider the following (decision) classification tree for whether the officiant was religious or secular. 
  
<<message=FALSE, echo=FALSE>>=
library(mosaicData)
marriage <- Marriage %>%
  mutate(officiant = ifelse(officialTitle %in% c("MARRIAGE OFFICIAL", "CHIEF CLERK", "CIRCUIT JUDGE "), "SECULAR ", "RELIGIOUS"), 
         previouslyMarried = ifelse(prevcount > 0, "Yes", "No")) %>%
  filter(person == "Bride")
  
library(rpart)
rpart(officiant ~ previouslyMarried + age, data = marriage)
@

  \begin{enumerate}
  
    \item Draw the decision boundaries on the plot below, labeling each box clearly with either RELIGIOUS or SECULAR. [Note: Some jitter has been applied to the $y$ values to make them easier to see.]
    
<<fig.height=8, echo=FALSE>>=
ggplot(marriage, aes(x = age, y = as.numeric(prevcount > 0), 
                     color = officiant)) +
  geom_jitter(width = 0, height = 0.05, alpha = 0.8, size = 3) +
  scale_y_continuous("Previously Married")  
@

    \item Betsy is a 24-year-old first-time bride. Do you predict that she will have a religious or secular ceremony? How confident are you in that prediction?
    \item Briefly summarize how the classification model informs your understanding of the real-world question.
  \end{enumerate}
  
  <<eval=FALSE, echo=FALSE>>=
require(maptree)
mod.tree = rpart(officiant ~ previouslyMarried + age, data=Marriage)
draw.tree(mod.tree, nodeinfo=TRUE, cex=0.7)
predict(mod.tree, newdata=data.frame(age=24, previouslyMarried="No"))
@
  
\section{Family dinners}

Here is an short excerpt from an article, ``Benefits of the Dinner Table Ritual," in the \emph{New York Times}, May 3, 2005 (\url{http://www.nytimes.com/2005/05/03/health/nutrition/benefits-of-the-dinner-table-ritual.html}).


\begin{quote}
The family dinner has long been an example of family togetherness. But recently, scientists have been coming up with compelling reasons ... for families to pull up a chair around the table.
Recent studies have begun to shore up the idea that family dinners [that is, eating dinner together as a family] can have an effect.

For example, a 2004 study of 4,746 children 11 to 18 years old, published in *The Archives of Pediatrics and Adolescent Medicine*, found that frequent family meals were associated with a lower risk of smoking, drinking and using marijuana; with a lower incidence of depressive symptoms and suicidal thoughts; and with better grades.

Another study last year, a survey of 12- to 17-year-olds by the National Center on Addiction and Substance Abuse at Columbia University, found that teenagers who reported eating two or fewer dinners a week with family members were more than one and a half times as likely to smoke, drink or use illegal substances than were teenagers who had five to seven family dinners.  ... A study from the University of Minnesota published last year found that adolescent girls who reported
having more frequent family meals and a positive atmosphere during those meals were less likely to have eating disorders.
\end{quote}

\begin{enumerate}
\item Explain in what ways the studies, as reported, do and do not provide a compelling reason for families to eat together frequently.

\item Considering the study done by the National Center on Addition and Substance Abuse, describe what might have been the explanatory and response variables measured, and what sort of model they would have
used.
\end{enumerate}

\section{Take-Home question: baby names}

You will be working with the \obj{babynames} data set, which is available through the \pkg{babynames} package for \R. 

<<message=FALSE>>=
library(babynames)
@

Consider \href{https://i2.wp.com/flowingdata.com/wp-content/uploads/2013/09/most-unisex-names2.png?w=2000}{this data graphic} on unisex names. You may want to read the accompanying \href{https://flowingdata.com/2013/09/25/the-most-unisex-names-in-us-history/}{FlowingData article}, which provides some additional context.

\subsection{Problem 1}

Make the data graphic shown below. You only have to make it for the name ``Jessie". Try to re-create it as closely as you can using \pkg{ggplot2}. Everything is in play: color, scales, tick labels, etc. You may want to consult \href{http://docs.ggplot2.org/current/}{the \pkg{ggplot2} documentation} for details and examples. [I'm pretty sure that this plot was created in \pkg{ggplot2} using the \pkg{babynames} data set, so you should be able to get very close.]

	\begin{center}
    \includegraphics[width=0.5\textwidth]{gfx/jessie.png}
	\end{center}
\subsection{Problem 2}

Make \href{https://i2.wp.com/flowingdata.com/wp-content/uploads/2013/09/most-unisex-names2.png?w=2000}{the full data graphic} with the 35 most unisex names. 


\section{Take-Home question: State of the Union}

We will be working with \href{http://www.gutenberg.org/cache/epub/5050/pg5050.txt}{The Complete State of the Union Addresses, from 1790 to 2006}, which is available through Project Gutenberg. This is quite literally the plain text transcriptions of all \href{http://en.wikipedia.org/wiki/State_of_the_Union}{State of the Union} (hereafter, SOTU) addresses given by sitting U.S. Presidents from 1790 to 2006.~\footnote{If these are unfamiliar to you, you may find it helpful to read the Wikipedia page linked to above.} 

You should look at \href{http://www.gutenberg.org/cache/epub/5050/pg5050.txt}{the actual text file} to familiarize yourself with the format of the text. The following command will read the text into \R, skipping the first 270 lines, and ignoring the last however-many lines that contain disclaimers and whatnot from Project Gutenberg. 

<<>>=
sotu <- scan("http://www.gutenberg.org/cache/epub/5050/pg5050.txt", 
             what = "character", skip = 270, sep = "\n")
end <- grep("END OF THE PROJECT GUTENBERG EBOOK OF COMPLETE ADDRESSES", sotu)
sotu <- sotu[1:(end - 1)]
@

Note that \obj{sotu} is a very long character vector! Each item in this vector is a line from a speech, with the following exceptions. 

Each address is offset by three asterisks, followed by \val{State of the Union Address}, followed by the President's name, the date, and then the text of the speech, which is broken over many lines. 

<<>>=
head(sotu, 10)
@

\subsection{Problem 1}

\begin{enumerate}
  \item How many State of the Union Addresses are listed in the file? Let this number be $n$ for the remainder of this exam. 
  \item Extract the name of the President for each SOTU address, and assign these names to a vector of length $n$ called \val{president}. Make a visual display showing the number of SOTU addresses that each President has given. 
  \item Extract the dates of the SOTU addresses, and assign them to a vector of length $n$ called \var{dates}.

\end{enumerate}

Use the following code to build a data frame called \obj{sotu\_df} with $n$ rows and two columns: \var{president} and \var{the.date}.

<<eval=FALSE>>=
sotu_df <- data.frame(president, the.date = as.Date(dates, "%B %d, %Y"))
@

Note that while \var{dates} was just a character vector, \var{sotu\_df\$the.date} has class \cmd{Date} and so \R has special functionality for working with these data. 


Use this line of code to create a third column for the \var{year}:

<<eval=FALSE>>=
sotu_df <- mutate(sotu_df, year = as.numeric(format(the.date, "%Y")))
@


\subsection{Problem 2}

In this problem we will investigate a question related to the content of the SOTU addresses. 

To facilitate this, the following bit of code will create a \cmd{list} of $n$ vectors called \obj{sotu\_word\_list}. Each item in this list is a vector of the words used in one particular SOTU address. 

<<eval=FALSE>>=
sotu_str <- paste(sotu, collapse=" ")
sotu_list <- strsplit(sotu_str, split = "\\*\\*\\*")[[1]]
sotu_list <- sotu_list[2:length(sotu_list)]
sotu_word_list <- strsplit(sotu_list, split=" ")
@

The following \func{word\_count} function will take a regular expression and return a vector of length $n$, with each item containing the number of times your pattern appeared in the list of words in that SOTU. 

<<eval=FALSE>>=
word_count <- function (grep.pattern, corpus = sotu_word_list, ...) {
  word.list <- sapply(corpus, grep, pattern = grep.pattern, ...)
  return(sapply(word.list, length))
}
@

For example, the word \val{war} appeared this many times in each SOTU:

<<eval=FALSE>>=
word_count("war")
@

Our goal in this exercise is to build a classifier for the \emph{political party affiliation} of each SOTU speaker, based on the content of his SOTU addresses. 

In order to do this, we need to know the political party to which each President belonged. The following bit of code will scrape this data from the Wikipedia, and make a few simplifying assumptions and corrections. 

<<eval=FALSE,message=FALSE>>=
library(XML)
tbls <- readHTMLTable("http://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States")
pres <- tbls[[1]]
presidents_df <- na.omit(select(pres, V3, V6))
names(presidents_df) <- c("name", "party")
# simplify old parties
presidents_df[grep("(Whig|n/a|Republican)", presidents_df$party), "party"] <- "Republican"
presidents_df[grep("(National|Federalist)", presidents_df$party), "party"] <- "Democratic"
presidents_df <- mutate(presidents_df, party = factor(party))
# clean up mismatched names
presidents_df <- mutate(presidents_df, match.name = gsub("[^a-z,A-Z, ,\\.]", "", name))
presidents_df <- mutate(presidents_df, match.name = gsub("born ", "", match.name))
presidents_df[grep("Martin Van Buren", presidents_df$match.name), "match.name"] <- "Martin van Buren"
presidents_df[grep("James K. Polk", presidents_df$match.name), "match.name"] <- "James Polk"
presidents_df[grep("William Howard Taft", presidents_df$match.name), "match.name"] <- "William H. Taft"
presidents_df[grep("Warren G. Harding", presidents_df$match.name), "match.name"] <- "Warren Harding"
presidents_df[grep("Gerald Ford", presidents_df$match.name), "match.name"] <- "Gerald R. Ford"
presidents_df[grep("George H. W. Bush", presidents_df$match.name), "match.name"] <- "George H.W. Bush"
presidents_df[grep("Bill Clinton", presidents_df$match.name), "match.name"] <- "William J. Clinton"
# presidents_df$match.name
# unique(sotu_df$president)
sotu_lkup <- left_join(x = sotu_df, y = unique(presidents_df), 
                       by = c("president" = "match.name")) %>%
  arrange(the.date)
@

Now, the data frame \obj{sotu\_lkup} contains $n$ rows. The binary response variable is \var{party}, which takes on two levels: \val{Democratic} and \val{Republican}. 

\begin{enumerate}
  \item Use the function \func{word\_count} (or whatever else you want to do), to build additional columns onto \obj{sotu\_lkup}. For example, maybe Republican presidents are more bellicose than Democratic presidents, and so they use the word \val{war} more often in their SOTUs. You may create as many additional features as you like. 
  
<<eval=FALSE>>=
sotu_lkup <- mutate(sotu_lkup, war = word_count("war"))
@

Hint: note that \func{word\_count} accepts a regular expression, and that punctuation was not necessarily handled properly in the creation of \obj{sotu\_word\_list}. 

  \item Using the features you created above, build a classifier for \var{party}. You may use whatever methods you like.

<<eval=FALSE,message=FALSE>>=
# e.g. build a decision tree using "war"
library(rpart)
mod <- rpart(party ~ war, data = sotu_lkup)
@

  \item Evaluate your classifier by printing the confusion matrix and computing the correct classification rate. For example, the \val{war} classifier is right 66\% of the time. 

<<eval=FALSE>>=
party.hat <- as.character(predict(mod, type="class"))
tally(party.hat ~ party, data = sotu_lkup, format = "count")
sum(party.hat == sotu_lkup$party) / nrow(sotu_lkup)
@

\end{enumerate}
